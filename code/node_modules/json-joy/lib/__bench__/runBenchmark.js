"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.runBenchmark = void 0;
var tslib_1 = require("tslib");
var Benchmark = require('benchmark');
var os = tslib_1.__importStar(require("os"));
var runBenchmark = function (benchmark) {
    var e_1, _a;
    var title = 'Benchmark: ' + (benchmark.name || '[unknown benchmark]');
    console.log('='.repeat(100 - title.length - 2) + ' ' + title);
    var warmup = !benchmark.warmup ? 'Not specified' : "".concat(benchmark.warmup, "x");
    var version = process.version;
    var arch = os.arch();
    var cpu = os.cpus()[0].model;
    console.log('Warmup:', warmup, ', Node.js:', version, ', Arch:', arch, ', CPU:', cpu);
    var _loop_1 = function (payload) {
        var e_2, _d;
        var suite = new Benchmark.Suite();
        var data = payload === null || payload === void 0 ? void 0 : payload.data;
        var name_1 = (payload === null || payload === void 0 ? void 0 : payload.name) || '[unknown payload]';
        var title_1 = typeof name_1 === 'function' ? name_1(data) : name_1;
        console.log('-'.repeat(100 - title_1.length - 2) + ' ' + title_1);
        var _loop_2 = function (runner) {
            var fn = runner.setup(data);
            if (benchmark.warmup)
                for (var i = 0; i < benchmark.warmup; i++)
                    fn(data);
            var isCorrect = undefined;
            if (benchmark.test) {
                try {
                    isCorrect = benchmark.test(data, fn(data));
                }
                catch (_g) {
                    isCorrect = false;
                }
            }
            var icon = isCorrect === undefined ? '🤞' : isCorrect ? '👍' : '👎';
            suite.add(icon + ' ' + (typeof runner.name === 'function' ? runner.name(data) : runner.name), function () { return fn(data); });
        };
        try {
            for (var _e = (e_2 = void 0, tslib_1.__values(benchmark.runners)), _f = _e.next(); !_f.done; _f = _e.next()) {
                var runner = _f.value;
                _loop_2(runner);
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_f && !_f.done && (_d = _e.return)) _d.call(_e);
            }
            finally { if (e_2) throw e_2.error; }
        }
        suite.on('cycle', function (event) {
            console.log(String(event.target));
        });
        suite.on('complete', function () {
            console.log("Fastest is ".concat(suite.filter('fastest').map('name')));
        });
        suite.run();
    };
    try {
        for (var _b = tslib_1.__values(benchmark.payloads || [{ name: 'No payload', data: undefined, test: undefined }]), _c = _b.next(); !_c.done; _c = _b.next()) {
            var payload = _c.value;
            _loop_1(payload);
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        }
        finally { if (e_1) throw e_1.error; }
    }
};
exports.runBenchmark = runBenchmark;
