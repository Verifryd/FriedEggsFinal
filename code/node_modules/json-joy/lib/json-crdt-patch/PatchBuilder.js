"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PatchBuilder = void 0;
var tslib_1 = require("tslib");
var operations_1 = require("./operations");
var clock_1 = require("./clock");
var isUint8Array_1 = require("../util/buffers/isUint8Array");
var Patch_1 = require("./Patch");
var constants_1 = require("./constants");
var Tuple_1 = require("./builder/Tuple");
var Konst_1 = require("./builder/Konst");
var DelayedValueBuilder_1 = require("./builder/DelayedValueBuilder");
var maybeConst = function (x) {
    switch (typeof x) {
        case 'number':
        case 'boolean':
            return true;
        default:
            return x === null;
    }
};
var PatchBuilder = (function () {
    function PatchBuilder(clock) {
        this.clock = clock;
        this.patch = new Patch_1.Patch();
    }
    PatchBuilder.prototype.nextTime = function () {
        return this.patch.nextTime() || this.clock.time;
    };
    PatchBuilder.prototype.flush = function () {
        var patch = this.patch;
        this.patch = new Patch_1.Patch();
        return patch;
    };
    PatchBuilder.prototype.obj = function () {
        this.pad();
        var id = this.clock.tick(1);
        this.patch.ops.push(new operations_1.NewObjOp(id));
        return id;
    };
    PatchBuilder.prototype.arr = function () {
        this.pad();
        var id = this.clock.tick(1);
        this.patch.ops.push(new operations_1.NewArrOp(id));
        return id;
    };
    PatchBuilder.prototype.vec = function () {
        this.pad();
        var id = this.clock.tick(1);
        this.patch.ops.push(new operations_1.NewVecOp(id));
        return id;
    };
    PatchBuilder.prototype.str = function () {
        this.pad();
        var id = this.clock.tick(1);
        this.patch.ops.push(new operations_1.NewStrOp(id));
        return id;
    };
    PatchBuilder.prototype.bin = function () {
        this.pad();
        var id = this.clock.tick(1);
        this.patch.ops.push(new operations_1.NewBinOp(id));
        return id;
    };
    PatchBuilder.prototype.const = function (value) {
        this.pad();
        var id = this.clock.tick(1);
        this.patch.ops.push(new operations_1.NewConOp(id, value));
        return id;
    };
    PatchBuilder.prototype.val = function (val) {
        this.pad();
        var id = this.clock.tick(1);
        this.patch.ops.push(new operations_1.NewValOp(id, val));
        return id;
    };
    PatchBuilder.prototype.root = function (val) {
        this.pad();
        var id = this.clock.tick(1);
        this.patch.ops.push(new operations_1.InsValOp(id, constants_1.ORIGIN, val));
        return id;
    };
    PatchBuilder.prototype.setKeys = function (obj, data) {
        this.pad();
        if (!data.length)
            throw new Error('EMPTY_TUPLES');
        var id = this.clock.tick(1);
        var op = new operations_1.InsObjOp(id, obj, data);
        var span = op.span();
        if (span > 1)
            this.clock.tick(span - 1);
        this.patch.ops.push(op);
        return id;
    };
    PatchBuilder.prototype.insVec = function (obj, data) {
        this.pad();
        if (!data.length)
            throw new Error('EMPTY_TUPLES');
        var id = this.clock.tick(1);
        var op = new operations_1.InsVecOp(id, obj, data);
        var span = op.span();
        if (span > 1)
            this.clock.tick(span - 1);
        this.patch.ops.push(op);
        return id;
    };
    PatchBuilder.prototype.setVal = function (obj, val) {
        this.pad();
        var id = this.clock.tick(1);
        var op = new operations_1.InsValOp(id, obj, val);
        this.patch.ops.push(op);
        return id;
    };
    PatchBuilder.prototype.insStr = function (obj, ref, data) {
        this.pad();
        if (!data.length)
            throw new Error('EMPTY_STRING');
        var id = this.clock.tick(1);
        var op = new operations_1.InsStrOp(id, obj, ref, data);
        var span = op.span();
        if (span > 1)
            this.clock.tick(span - 1);
        this.patch.ops.push(op);
        return id;
    };
    PatchBuilder.prototype.insBin = function (obj, ref, data) {
        this.pad();
        if (!data.length)
            throw new Error('EMPTY_BINARY');
        var id = this.clock.tick(1);
        var op = new operations_1.InsBinOp(id, obj, ref, data);
        var span = op.span();
        if (span > 1)
            this.clock.tick(span - 1);
        this.patch.ops.push(op);
        return id;
    };
    PatchBuilder.prototype.insArr = function (arr, ref, data) {
        this.pad();
        var id = this.clock.tick(1);
        var op = new operations_1.InsArrOp(id, arr, ref, data);
        var span = op.span();
        if (span > 1)
            this.clock.tick(span - 1);
        this.patch.ops.push(op);
        return id;
    };
    PatchBuilder.prototype.del = function (obj, what) {
        this.pad();
        var id = this.clock.tick(1);
        this.patch.ops.push(new operations_1.DelOp(id, obj, what));
        return id;
    };
    PatchBuilder.prototype.nop = function (span) {
        this.pad();
        var id = this.clock.tick(span);
        this.patch.ops.push(new operations_1.NopOp(id, span));
        return id;
    };
    PatchBuilder.prototype.jsonObj = function (obj) {
        var e_1, _a;
        var id = this.obj();
        var keys = Object.keys(obj);
        if (keys.length) {
            var tuples = [];
            try {
                for (var keys_1 = tslib_1.__values(keys), keys_1_1 = keys_1.next(); !keys_1_1.done; keys_1_1 = keys_1.next()) {
                    var k = keys_1_1.value;
                    var value = obj[k];
                    var valueId = value instanceof clock_1.Timestamp ? value : maybeConst(value) ? this.const(value) : this.json(value);
                    tuples.push([k, valueId]);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (keys_1_1 && !keys_1_1.done && (_a = keys_1.return)) _a.call(keys_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
            this.setKeys(id, tuples);
        }
        return id;
    };
    PatchBuilder.prototype.jsonArr = function (arr) {
        var e_2, _a;
        var id = this.arr();
        if (arr.length) {
            var values = [];
            try {
                for (var arr_1 = tslib_1.__values(arr), arr_1_1 = arr_1.next(); !arr_1_1.done; arr_1_1 = arr_1.next()) {
                    var el = arr_1_1.value;
                    values.push(this.json(el));
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (arr_1_1 && !arr_1_1.done && (_a = arr_1.return)) _a.call(arr_1);
                }
                finally { if (e_2) throw e_2.error; }
            }
            this.insArr(id, id, values);
        }
        return id;
    };
    PatchBuilder.prototype.jsonStr = function (str) {
        var id = this.str();
        if (str)
            this.insStr(id, id, str);
        return id;
    };
    PatchBuilder.prototype.jsonBin = function (bin) {
        var id = this.bin();
        if (bin.length)
            this.insBin(id, id, bin);
        return id;
    };
    PatchBuilder.prototype.jsonVal = function (value) {
        var id = this.const(value);
        return this.val(id);
    };
    PatchBuilder.prototype.jsonVec = function (vector) {
        var id = this.vec();
        var length = vector.length;
        if (length) {
            var writes = [];
            for (var i = 0; i < length; i++)
                writes.push([i, this.constOrJson(vector[i])]);
            this.insVec(id, writes);
        }
        return id;
    };
    PatchBuilder.prototype.json = function (json) {
        if (json instanceof clock_1.Timestamp)
            return json;
        if (json === undefined)
            return this.const(json);
        if (json instanceof Array)
            return this.jsonArr(json);
        if ((0, isUint8Array_1.isUint8Array)(json))
            return this.jsonBin(json);
        if (json instanceof Tuple_1.Tuple)
            return this.jsonVec(json.slots);
        if (json instanceof Konst_1.Konst)
            return this.const(json.val);
        if (json instanceof DelayedValueBuilder_1.DelayedValueBuilder)
            return json.build(this);
        switch (typeof json) {
            case 'object':
                return json === null ? this.jsonVal(json) : this.jsonObj(json);
            case 'string':
                return this.jsonStr(json);
            case 'number':
            case 'boolean':
                return this.jsonVal(json);
        }
        throw new Error('INVALID_JSON');
    };
    PatchBuilder.prototype.constOrJson = function (value) {
        if (value instanceof clock_1.Timestamp)
            return value;
        return maybeConst(value) ? this.const(value) : this.json(value);
    };
    PatchBuilder.prototype.maybeConst = function (value) {
        return value instanceof clock_1.Timestamp ? value : this.const(value);
    };
    PatchBuilder.prototype.pad = function () {
        var nextTime = this.patch.nextTime();
        if (!nextTime)
            return;
        var drift = this.clock.time - nextTime;
        if (drift > 0) {
            var id = (0, clock_1.ts)(this.clock.sid, nextTime);
            var padding = new operations_1.NopOp(id, drift);
            this.patch.ops.push(padding);
        }
    };
    return PatchBuilder;
}());
exports.PatchBuilder = PatchBuilder;
