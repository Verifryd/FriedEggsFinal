"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DelOp = exports.NopOp = exports.InsArrOp = exports.InsBinOp = exports.InsStrOp = exports.InsVecOp = exports.InsObjOp = exports.InsValOp = exports.NewArrOp = exports.NewBinOp = exports.NewStrOp = exports.NewVecOp = exports.NewObjOp = exports.NewValOp = exports.NewConOp = void 0;
var clock_1 = require("./clock");
var NewConOp = (function () {
    function NewConOp(id, val) {
        this.id = id;
        this.val = val;
    }
    NewConOp.prototype.span = function () {
        return 1;
    };
    NewConOp.prototype.name = function () {
        return 'con';
    };
    NewConOp.prototype.toString = function (tab) {
        if (tab === void 0) { tab = ''; }
        var val = this.val;
        var valFormatted = val instanceof clock_1.Timestamp
            ? "{ ".concat((0, clock_1.toDisplayString)(val), " }")
            : val instanceof Uint8Array
                ? val.length < 13
                    ? "Uint8Array { ".concat(('' + val).replaceAll(',', ', '), " }")
                    : "Uint8Array(".concat(val.length, ")")
                : "{ ".concat(JSON.stringify(val), " }");
        return "\"".concat(this.name(), "\" ").concat((0, clock_1.toDisplayString)(this.id), " ").concat(valFormatted);
    };
    return NewConOp;
}());
exports.NewConOp = NewConOp;
var NewValOp = (function () {
    function NewValOp(id, val) {
        this.id = id;
        this.val = val;
    }
    NewValOp.prototype.span = function () {
        return 1;
    };
    NewValOp.prototype.name = function () {
        return 'val';
    };
    NewValOp.prototype.toString = function () {
        return "\"".concat(this.name(), "\" ").concat((0, clock_1.toDisplayString)(this.id), " { ").concat((0, clock_1.toDisplayString)(this.val), " }");
    };
    return NewValOp;
}());
exports.NewValOp = NewValOp;
var NewObjOp = (function () {
    function NewObjOp(id) {
        this.id = id;
    }
    NewObjOp.prototype.span = function () {
        return 1;
    };
    NewObjOp.prototype.name = function () {
        return 'obj';
    };
    NewObjOp.prototype.toString = function () {
        return "\"".concat(this.name(), "\" ").concat((0, clock_1.toDisplayString)(this.id));
    };
    return NewObjOp;
}());
exports.NewObjOp = NewObjOp;
var NewVecOp = (function () {
    function NewVecOp(id) {
        this.id = id;
    }
    NewVecOp.prototype.span = function () {
        return 1;
    };
    NewVecOp.prototype.name = function () {
        return 'vec';
    };
    NewVecOp.prototype.toString = function () {
        return "\"".concat(this.name(), "\" ").concat((0, clock_1.toDisplayString)(this.id));
    };
    return NewVecOp;
}());
exports.NewVecOp = NewVecOp;
var NewStrOp = (function () {
    function NewStrOp(id) {
        this.id = id;
    }
    NewStrOp.prototype.span = function () {
        return 1;
    };
    NewStrOp.prototype.name = function () {
        return 'str';
    };
    NewStrOp.prototype.toString = function () {
        return "\"".concat(this.name(), "\" ").concat((0, clock_1.toDisplayString)(this.id));
    };
    return NewStrOp;
}());
exports.NewStrOp = NewStrOp;
var NewBinOp = (function () {
    function NewBinOp(id) {
        this.id = id;
    }
    NewBinOp.prototype.span = function () {
        return 1;
    };
    NewBinOp.prototype.name = function () {
        return 'bin';
    };
    NewBinOp.prototype.toString = function (tab) {
        if (tab === void 0) { tab = ''; }
        return "\"".concat(this.name(), "\" ").concat((0, clock_1.toDisplayString)(this.id));
    };
    return NewBinOp;
}());
exports.NewBinOp = NewBinOp;
var NewArrOp = (function () {
    function NewArrOp(id) {
        this.id = id;
    }
    NewArrOp.prototype.span = function () {
        return 1;
    };
    NewArrOp.prototype.name = function () {
        return 'arr';
    };
    NewArrOp.prototype.toString = function () {
        return "\"".concat(this.name(), "\" ").concat((0, clock_1.toDisplayString)(this.id));
    };
    return NewArrOp;
}());
exports.NewArrOp = NewArrOp;
var InsValOp = (function () {
    function InsValOp(id, obj, val) {
        this.id = id;
        this.obj = obj;
        this.val = val;
    }
    InsValOp.prototype.span = function () {
        return 1;
    };
    InsValOp.prototype.name = function () {
        return 'ins_val';
    };
    InsValOp.prototype.toString = function (tab) {
        if (tab === void 0) { tab = ''; }
        return "\"".concat(this.name(), "\" ").concat((0, clock_1.toDisplayString)(this.id), "!").concat(this.span(), ", obj = ").concat((0, clock_1.toDisplayString)(this.obj), ", val = ").concat((0, clock_1.toDisplayString)(this.val));
    };
    return InsValOp;
}());
exports.InsValOp = InsValOp;
var InsObjOp = (function () {
    function InsObjOp(id, obj, data) {
        this.id = id;
        this.obj = obj;
        this.data = data;
    }
    InsObjOp.prototype.span = function () {
        return 1;
    };
    InsObjOp.prototype.name = function () {
        return 'ins_obj';
    };
    InsObjOp.prototype.toString = function (tab) {
        if (tab === void 0) { tab = ''; }
        var out = "\"".concat(this.name(), "\" ").concat((0, clock_1.toDisplayString)(this.id), "!").concat(this.span(), ", obj = ").concat((0, clock_1.toDisplayString)(this.obj));
        for (var i = 0; i < this.data.length; i++) {
            var isLast = i === this.data.length - 1;
            out += "\n".concat(tab, "  ").concat(isLast ? '└─' : '├─', " ").concat(JSON.stringify(this.data[i][0]), ": ").concat((0, clock_1.toDisplayString)(this.data[i][1]));
        }
        return out;
    };
    return InsObjOp;
}());
exports.InsObjOp = InsObjOp;
var InsVecOp = (function () {
    function InsVecOp(id, obj, data) {
        this.id = id;
        this.obj = obj;
        this.data = data;
    }
    InsVecOp.prototype.span = function () {
        return 1;
    };
    InsVecOp.prototype.name = function () {
        return 'ins_vec';
    };
    InsVecOp.prototype.toString = function (tab) {
        if (tab === void 0) { tab = ''; }
        var out = "\"".concat(this.name(), "\" ").concat((0, clock_1.toDisplayString)(this.id), "!").concat(this.span(), ", obj = ").concat((0, clock_1.toDisplayString)(this.obj));
        for (var i = 0; i < this.data.length; i++) {
            var isLast = i === this.data.length - 1;
            out += "\n".concat(tab, "  ").concat(isLast ? '└─' : '├─', " ").concat(JSON.stringify(this.data[i][0]), ": ").concat((0, clock_1.toDisplayString)(this.data[i][1]));
        }
        return out;
    };
    return InsVecOp;
}());
exports.InsVecOp = InsVecOp;
var InsStrOp = (function () {
    function InsStrOp(id, obj, ref, data) {
        this.id = id;
        this.obj = obj;
        this.ref = ref;
        this.data = data;
    }
    InsStrOp.prototype.span = function () {
        return this.data.length;
    };
    InsStrOp.prototype.name = function () {
        return 'ins_str';
    };
    InsStrOp.prototype.toString = function () {
        return "\"".concat(this.name(), "\" ").concat((0, clock_1.toDisplayString)(this.id), "!").concat(this.span(), ", obj = ").concat((0, clock_1.toDisplayString)(this.obj), " { ").concat((0, clock_1.toDisplayString)(this.ref), " \u2190 ").concat(JSON.stringify(this.data), " }");
    };
    return InsStrOp;
}());
exports.InsStrOp = InsStrOp;
var InsBinOp = (function () {
    function InsBinOp(id, obj, ref, data) {
        this.id = id;
        this.obj = obj;
        this.ref = ref;
        this.data = data;
    }
    InsBinOp.prototype.span = function () {
        return this.data.length;
    };
    InsBinOp.prototype.name = function () {
        return 'ins_bin';
    };
    InsBinOp.prototype.toString = function (tab) {
        if (tab === void 0) { tab = ''; }
        var ref = (0, clock_1.toDisplayString)(this.ref);
        return "\"".concat(this.name(), "\" ").concat((0, clock_1.toDisplayString)(this.id), "!").concat(this.span(), ", obj = ").concat((0, clock_1.toDisplayString)(this.obj), " { ").concat(ref, " \u2190 ").concat(this.data, " }");
    };
    return InsBinOp;
}());
exports.InsBinOp = InsBinOp;
var InsArrOp = (function () {
    function InsArrOp(id, obj, ref, data) {
        this.id = id;
        this.obj = obj;
        this.ref = ref;
        this.data = data;
    }
    InsArrOp.prototype.span = function () {
        return this.data.length;
    };
    InsArrOp.prototype.name = function () {
        return 'ins_arr';
    };
    InsArrOp.prototype.toString = function () {
        return "\"".concat(this.name(), "\" ").concat((0, clock_1.toDisplayString)(this.id), "!").concat(this.span(), ", obj = ").concat((0, clock_1.toDisplayString)(this.obj), " { ").concat((0, clock_1.toDisplayString)(this.ref), " \u2190 ").concat(this.data.map(clock_1.toDisplayString).join(', '), " }");
    };
    return InsArrOp;
}());
exports.InsArrOp = InsArrOp;
var NopOp = (function () {
    function NopOp(id, len) {
        this.id = id;
        this.len = len;
    }
    NopOp.prototype.span = function () {
        return this.len;
    };
    NopOp.prototype.name = function () {
        return 'nop';
    };
    NopOp.prototype.toString = function () {
        return "\"".concat(this.name(), "\" ").concat((0, clock_1.toDisplayString)(this.id), "!").concat(this.len);
    };
    return NopOp;
}());
exports.NopOp = NopOp;
var DelOp = (function () {
    function DelOp(id, obj, what) {
        this.id = id;
        this.obj = obj;
        this.what = what;
    }
    DelOp.prototype.span = function () {
        return 1;
    };
    DelOp.prototype.name = function () {
        return 'del';
    };
    DelOp.prototype.toString = function () {
        var spans = this.what.map(function (span) { return (0, clock_1.toDisplayString)(span) + '!' + span.span; }).join(', ');
        return "\"".concat(this.name(), "\" ").concat((0, clock_1.toDisplayString)(this.id), ", obj = ").concat((0, clock_1.toDisplayString)(this.obj), " { ").concat(spans, " }");
    };
    return DelOp;
}());
exports.DelOp = DelOp;
