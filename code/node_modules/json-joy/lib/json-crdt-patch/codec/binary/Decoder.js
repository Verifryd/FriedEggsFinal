"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Decoder = void 0;
var tslib_1 = require("tslib");
var CrdtDecoder_1 = require("../../util/binary/CrdtDecoder");
var clock_1 = require("../../clock");
var PatchBuilder_1 = require("../../PatchBuilder");
var CborDecoder_1 = require("../../../json-pack/cbor/CborDecoder");
var Decoder = (function (_super) {
    tslib_1.__extends(Decoder, _super);
    function Decoder(reader) {
        if (reader === void 0) { reader = new CrdtDecoder_1.CrdtDecoder(); }
        return _super.call(this, reader) || this;
    }
    Decoder.prototype.decode = function (data) {
        var reader = this.reader;
        reader.reset(data);
        var _a = tslib_1.__read(reader.b1vu56(), 2), isServerClock = _a[0], x = _a[1];
        var clock = isServerClock ? new clock_1.ServerVectorClock(1, x) : new clock_1.VectorClock(x, reader.vu57());
        this.patchId = (0, clock_1.ts)(clock.sid, clock.time);
        this.builder = new PatchBuilder_1.PatchBuilder(clock);
        var map = this.val();
        if (map instanceof Array)
            this.builder.patch.meta = map[0];
        this.decodeOperations();
        return this.builder.patch;
    };
    Decoder.prototype.decodeId = function () {
        var reader = this.reader;
        var _a = tslib_1.__read(reader.b1vu56(), 2), isServerClock = _a[0], x = _a[1];
        if (isServerClock) {
            return (0, clock_1.ts)(1, x);
        }
        else {
            var patchId = this.patchId;
            if (x === 1) {
                var delta = reader.vu57();
                return (0, clock_1.ts)(patchId.sid, patchId.time + delta);
            }
            else {
                var time = reader.vu57();
                return (0, clock_1.ts)(x, time);
            }
        }
    };
    Decoder.prototype.decodeTss = function () {
        var id = this.decodeId();
        var span = this.reader.vu57();
        return (0, clock_1.interval)(id, 0, span);
    };
    Decoder.prototype.decodeOperations = function () {
        var reader = this.reader;
        while (reader.x < reader.uint8.length)
            this.decodeOperation();
    };
    Decoder.prototype.decodeOperation = function () {
        var builder = this.builder;
        var reader = this.reader;
        var octet = reader.u8();
        var opcode = octet & 31;
        switch (opcode) {
            case 0: {
                var length_1 = octet >> 5;
                builder.const(length_1 === 0 ? this.val() : this.decodeId());
                break;
            }
            case 1: {
                builder.val(this.decodeId());
                break;
            }
            case 2: {
                builder.obj();
                break;
            }
            case 3: {
                builder.vec();
                break;
            }
            case 4: {
                builder.str();
                break;
            }
            case 5: {
                builder.bin();
                break;
            }
            case 6: {
                builder.arr();
                break;
            }
            case 9: {
                var obj = this.decodeId();
                var val = this.decodeId();
                builder.setVal(obj, val);
                break;
            }
            case 10: {
                var length_2 = octet >> 5;
                if (length_2 === 0)
                    length_2 = reader.vu57();
                var obj = this.decodeId();
                var tuples = [];
                for (var i = 0; i < length_2; i++) {
                    var key = this.val();
                    if (typeof key !== 'string')
                        continue;
                    var value = this.decodeId();
                    tuples.push([key, value]);
                }
                builder.setKeys(obj, tuples);
                break;
            }
            case 11: {
                var length_3 = octet >> 5;
                if (length_3 === 0)
                    length_3 = reader.vu57();
                var obj = this.decodeId();
                var tuples = [];
                for (var i = 0; i < length_3; i++) {
                    var index = this.val();
                    if (typeof index !== 'number')
                        continue;
                    var value = this.decodeId();
                    tuples.push([index, value]);
                }
                builder.insVec(obj, tuples);
                break;
            }
            case 12: {
                var length_4 = octet >> 5;
                if (length_4 === 0)
                    length_4 = reader.vu57();
                var obj = this.decodeId();
                var after = this.decodeId();
                var str = reader.utf8(length_4);
                builder.insStr(obj, after, str);
                break;
            }
            case 13: {
                var length_5 = octet >> 5;
                if (length_5 === 0)
                    length_5 = reader.vu57();
                var obj = this.decodeId();
                var after = this.decodeId();
                var buf = reader.buf(length_5);
                if (!(buf instanceof Uint8Array))
                    return;
                builder.insBin(obj, after, buf);
                break;
            }
            case 14: {
                var length_6 = octet >> 5;
                if (length_6 === 0)
                    length_6 = reader.vu57();
                var obj = this.decodeId();
                var after = this.decodeId();
                var elements = [];
                for (var i = 0; i < length_6; i++)
                    elements.push(this.decodeId());
                builder.insArr(obj, after, elements);
                break;
            }
            case 16: {
                var length_7 = octet >> 5;
                if (length_7 === 0)
                    length_7 = reader.vu57();
                var obj = this.decodeId();
                var what = [];
                for (var i = 0; i < length_7; i++)
                    what.push(this.decodeTss());
                builder.del(obj, what);
                break;
            }
            case 17: {
                var length_8 = octet >> 5;
                if (length_8 === 0)
                    length_8 = reader.vu57();
                builder.nop(length_8);
                break;
            }
            default: {
                throw new Error('UNKNOWN_OP');
            }
        }
    };
    return Decoder;
}(CborDecoder_1.CborDecoder));
exports.Decoder = Decoder;
