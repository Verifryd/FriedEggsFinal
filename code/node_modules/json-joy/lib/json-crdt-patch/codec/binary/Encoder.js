"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Encoder = void 0;
var tslib_1 = require("tslib");
var operations = tslib_1.__importStar(require("../../operations"));
var CrdtEncoder_1 = require("../../util/binary/CrdtEncoder");
var clock_1 = require("../../clock");
var CborEncoder_1 = require("../../../json-pack/cbor/CborEncoder");
var Encoder = (function (_super) {
    tslib_1.__extends(Encoder, _super);
    function Encoder(writer) {
        if (writer === void 0) { writer = new CrdtEncoder_1.CrdtWriter(); }
        var _this = _super.call(this, writer) || this;
        _this.writer = writer;
        return _this;
    }
    Encoder.prototype.encode = function (patch) {
        this.writer.reset();
        var id = (this.patchId = patch.getId());
        var isServerClock = id.sid === 1;
        var writer = this.writer;
        if (isServerClock) {
            writer.b1vu56(true, id.time);
        }
        else {
            writer.b1vu56(false, id.sid);
            writer.vu57(id.time);
        }
        var meta = patch.meta;
        if (meta === undefined)
            this.writeNull();
        else
            this.writeArr([meta]);
        this.encodeOperations(patch);
        return writer.flush();
    };
    Encoder.prototype.encodeOperations = function (patch) {
        var ops = patch.ops;
        for (var i = 0; i < ops.length; i++) {
            var op = ops[i];
            this.encodeOperation(op);
        }
    };
    Encoder.prototype.encodeId = function (id) {
        var sessionId = id.sid;
        var time = id.time;
        var writer = this.writer;
        if (sessionId === 1) {
            writer.b1vu56(true, id.time);
        }
        else {
            var patchId = this.patchId;
            var vu56 = 1;
            var vu57 = time;
            if (sessionId === patchId.sid && time >= patchId.time)
                vu57 = time - patchId.time;
            else
                vu56 = sessionId;
            writer.b1vu56(false, vu56);
            writer.vu57(vu57);
        }
    };
    Encoder.prototype.encodeTss = function (span) {
        this.encodeId(span);
        this.writer.vu57(span.span);
    };
    Encoder.prototype.writeInsStr = function (length, obj, ref, str) {
        var writer = this.writer;
        if (length <= 7) {
            writer.u8((length << 5) | 12);
        }
        else {
            writer.u8(12);
            writer.vu57(length);
        }
        this.encodeId(obj);
        this.encodeId(ref);
        return writer.utf8(str);
    };
    Encoder.prototype.encodeOperation = function (op) {
        var writer = this.writer;
        var constructor = op.constructor;
        switch (constructor) {
            case operations.NewConOp: {
                var operation = op;
                var val = operation.val;
                if (val instanceof clock_1.Timestamp) {
                    writer.u8(32 | 0);
                    this.encodeId(val);
                }
                else {
                    writer.u8(0);
                    this.writeAny(val);
                }
                break;
            }
            case operations.NewValOp: {
                var operation = op;
                var val = operation.val;
                writer.u8(1);
                this.encodeId(val);
                break;
            }
            case operations.NewObjOp: {
                writer.u8(2);
                break;
            }
            case operations.NewVecOp: {
                writer.u8(3);
                break;
            }
            case operations.NewStrOp: {
                writer.u8(4);
                break;
            }
            case operations.NewBinOp: {
                writer.u8(5);
                break;
            }
            case operations.NewArrOp: {
                writer.u8(6);
                break;
            }
            case operations.InsValOp: {
                var operation = op;
                writer.u8(9);
                this.encodeId(operation.obj);
                this.encodeId(operation.val);
                break;
            }
            case operations.InsObjOp: {
                var operation = op;
                var data = operation.data;
                var length_1 = data.length;
                if (length_1 <= 7) {
                    writer.u8((length_1 << 5) | 10);
                }
                else {
                    writer.u8(10);
                    writer.vu57(length_1);
                }
                this.encodeId(operation.obj);
                for (var i = 0; i < length_1; i++) {
                    var tuple = data[i];
                    this.writeStr(tuple[0]);
                    this.encodeId(tuple[1]);
                }
                break;
            }
            case operations.InsVecOp: {
                var operation = op;
                var data = operation.data;
                var length_2 = data.length;
                if (length_2 <= 7) {
                    writer.u8((length_2 << 5) | 11);
                }
                else {
                    writer.u8(11);
                    writer.vu57(length_2);
                }
                this.encodeId(operation.obj);
                for (var i = 0; i < length_2; i++) {
                    var tuple = data[i];
                    writer.u8(tuple[0]);
                    this.encodeId(tuple[1]);
                }
                break;
            }
            case operations.InsStrOp: {
                var operation = op;
                var obj = operation.obj;
                var ref = operation.ref;
                var str = operation.data;
                var len1 = str.length;
                writer.ensureCapacity(24 + len1 * 4);
                var x = writer.x;
                var len2 = this.writeInsStr(len1, obj, ref, str);
                if (len1 !== len2) {
                    writer.x = x;
                    this.writeInsStr(len2, obj, ref, str);
                }
                break;
            }
            case operations.InsBinOp: {
                var operation = op;
                var buf = operation.data;
                var length_3 = buf.length;
                if (length_3 <= 7) {
                    writer.u8((length_3 << 5) | 13);
                }
                else {
                    writer.u8(13);
                    writer.vu57(length_3);
                }
                this.encodeId(operation.obj);
                this.encodeId(operation.ref);
                writer.buf(buf, length_3);
                break;
            }
            case operations.InsArrOp: {
                var operation = op;
                var elements = operation.data;
                var length_4 = elements.length;
                if (length_4 <= 7) {
                    writer.u8((length_4 << 5) | 14);
                }
                else {
                    writer.u8(14);
                    writer.vu57(length_4);
                }
                this.encodeId(operation.obj);
                this.encodeId(operation.ref);
                for (var i = 0; i < length_4; i++)
                    this.encodeId(elements[i]);
                break;
            }
            case operations.DelOp: {
                var operation = op;
                var what = operation.what;
                var length_5 = what.length;
                if (length_5 <= 7) {
                    writer.u8((length_5 << 5) | 16);
                }
                else {
                    writer.u8(16);
                    writer.vu57(length_5);
                }
                this.encodeId(operation.obj);
                for (var i = 0; i < length_5; i++)
                    this.encodeTss(what[i]);
                break;
            }
            case operations.NopOp: {
                var operation = op;
                var length_6 = operation.len;
                if (length_6 <= 7) {
                    writer.u8((length_6 << 5) | 17);
                }
                else {
                    writer.u8(17);
                    writer.vu57(length_6);
                }
                break;
            }
            default: {
                throw new Error('UNKNOWN_OP');
            }
        }
    };
    return Encoder;
}(CborEncoder_1.CborEncoder));
exports.Encoder = Encoder;
