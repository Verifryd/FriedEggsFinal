"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.encode = void 0;
var tslib_1 = require("tslib");
var operations = tslib_1.__importStar(require("../../operations"));
var clock_1 = require("../../clock");
var toBase64_1 = require("../../../util/base64/toBase64");
var timestamp = function (sid, time, ts) {
    var tsSessionId = ts.sid;
    if (tsSessionId === 1)
        return ts.time;
    else if (tsSessionId === sid && ts.time >= time)
        return time - ts.time - 1;
    return [tsSessionId, ts.time];
};
var timespan = function (sid, time, span) {
    var ts = timestamp(sid, time, span);
    if (ts instanceof Array) {
        ts.push(span.span);
        return ts;
    }
    return [ts, span.span];
};
var encode = function (patch) {
    var e_1, _a, e_2, _b, e_3, _c, e_4, _d;
    var id = patch.getId();
    if (!id)
        throw new Error('PATCH_EMPTY');
    var sid = id.sid;
    var time = id.time;
    var header = sid === 1 ? [time] : [[sid, time]];
    var meta = patch.meta;
    if (meta !== undefined)
        header.push(meta);
    var res = [header];
    try {
        for (var _e = tslib_1.__values(patch.ops), _f = _e.next(); !_f.done; _f = _e.next()) {
            var op = _f.value;
            if (op instanceof operations.NewConOp) {
                var val = op.val;
                if (val instanceof clock_1.Timestamp) {
                    res.push([0, timestamp(sid, time, val), true]);
                }
                else if (val === undefined) {
                    res.push([0]);
                }
                else {
                    res.push([0, val]);
                }
            }
            else if (op instanceof operations.NewValOp) {
                res.push([1, timestamp(sid, time, op.val)]);
            }
            else if (op instanceof operations.NewObjOp) {
                res.push([2]);
            }
            else if (op instanceof operations.NewVecOp) {
                res.push([3]);
            }
            else if (op instanceof operations.NewStrOp) {
                res.push([4]);
            }
            else if (op instanceof operations.NewBinOp) {
                res.push([5]);
            }
            else if (op instanceof operations.NewArrOp) {
                res.push([6]);
            }
            else if (op instanceof operations.InsValOp) {
                res.push([9, timestamp(sid, time, op.obj), timestamp(sid, time, op.val)]);
            }
            else if (op instanceof operations.InsObjOp) {
                var tuples = [];
                try {
                    for (var _g = (e_2 = void 0, tslib_1.__values(op.data)), _h = _g.next(); !_h.done; _h = _g.next()) {
                        var _j = tslib_1.__read(_h.value, 2), key = _j[0], value = _j[1];
                        tuples.push([key, timestamp(sid, time, value)]);
                    }
                }
                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                finally {
                    try {
                        if (_h && !_h.done && (_b = _g.return)) _b.call(_g);
                    }
                    finally { if (e_2) throw e_2.error; }
                }
                var operation = [
                    10,
                    timestamp(sid, time, op.obj),
                    tuples,
                ];
                res.push(operation);
            }
            else if (op instanceof operations.InsVecOp) {
                var tuples = [];
                try {
                    for (var _k = (e_3 = void 0, tslib_1.__values(op.data)), _l = _k.next(); !_l.done; _l = _k.next()) {
                        var _m = tslib_1.__read(_l.value, 2), key = _m[0], value = _m[1];
                        tuples.push([key, timestamp(sid, time, value)]);
                    }
                }
                catch (e_3_1) { e_3 = { error: e_3_1 }; }
                finally {
                    try {
                        if (_l && !_l.done && (_c = _k.return)) _c.call(_k);
                    }
                    finally { if (e_3) throw e_3.error; }
                }
                var operation = [
                    11,
                    timestamp(sid, time, op.obj),
                    tuples,
                ];
                res.push(operation);
            }
            else if (op instanceof operations.InsStrOp) {
                var operation = [
                    12,
                    timestamp(sid, time, op.obj),
                    timestamp(sid, time, op.ref),
                    op.data,
                ];
                res.push(operation);
            }
            else if (op instanceof operations.InsBinOp) {
                var operation = [
                    13,
                    timestamp(sid, time, op.obj),
                    timestamp(sid, time, op.ref),
                    (0, toBase64_1.toBase64)(op.data),
                ];
                res.push(operation);
            }
            else if (op instanceof operations.InsArrOp) {
                var elements = [];
                try {
                    for (var _o = (e_4 = void 0, tslib_1.__values(op.data)), _p = _o.next(); !_p.done; _p = _o.next()) {
                        var element = _p.value;
                        elements.push(timestamp(sid, time, element));
                    }
                }
                catch (e_4_1) { e_4 = { error: e_4_1 }; }
                finally {
                    try {
                        if (_p && !_p.done && (_d = _o.return)) _d.call(_o);
                    }
                    finally { if (e_4) throw e_4.error; }
                }
                var operation = [
                    14,
                    timestamp(sid, time, op.obj),
                    timestamp(sid, time, op.ref),
                    elements,
                ];
                res.push(operation);
            }
            else if (op instanceof operations.DelOp) {
                var operation = [
                    16,
                    timestamp(sid, time, op.obj),
                    op.what.map(function (span) { return timespan(sid, time, span); }),
                ];
                res.push(operation);
            }
            else if (op instanceof operations.NopOp) {
                var operation = [17];
                var len = op.len;
                if (len > 1)
                    operation.push(len);
                res.push(operation);
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_f && !_f.done && (_a = _e.return)) _a.call(_e);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return res;
};
exports.encode = encode;
