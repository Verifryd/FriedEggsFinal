"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.decode = void 0;
var tslib_1 = require("tslib");
var fromBase64_1 = require("../../../util/base64/fromBase64");
var clock_1 = require("../../clock");
var PatchBuilder_1 = require("../../PatchBuilder");
var timestamp = function (sid, time, x) {
    if (Array.isArray(x))
        return new clock_1.Timestamp(x[0], x[1]);
    else if (x < 0)
        return new clock_1.Timestamp(sid, time - x - 1);
    else
        return new clock_1.Timestamp(1, x);
};
var timespan = function (sid, time, span) {
    if (span.length === 3)
        return new clock_1.Timespan(span[0], span[1], span[2]);
    else {
        var x = span[0];
        return x < 0 ? new clock_1.Timespan(sid, time - x - 1, span[1]) : new clock_1.Timespan(1, x, span[1]);
    }
};
var decode = function (data) {
    var header = data[0];
    var x = header[0];
    var clock = Array.isArray(x) ? new clock_1.VectorClock(x[0], x[1]) : new clock_1.ServerVectorClock(1, x);
    var sid = clock.sid;
    var time = clock.time;
    var builder = new PatchBuilder_1.PatchBuilder(clock);
    var length = data.length;
    for (var i = 1; i < length; i++) {
        var op = data[i];
        switch (op[0]) {
            case 0: {
                var _a = tslib_1.__read(op, 3), value = _a[1], isTimestamp = _a[2];
                builder.const(isTimestamp ? timestamp(sid, time, value) : value);
                break;
            }
            case 1: {
                builder.val(timestamp(sid, time, op[1]));
                break;
            }
            case 2: {
                builder.obj();
                break;
            }
            case 3: {
                builder.vec();
                break;
            }
            case 4: {
                builder.str();
                break;
            }
            case 5: {
                builder.bin();
                break;
            }
            case 6: {
                builder.arr();
                break;
            }
            case 9: {
                builder.setVal(timestamp(sid, time, op[1]), timestamp(sid, time, op[2]));
                break;
            }
            case 10: {
                var obj = timestamp(sid, time, op[1]);
                var tuples = [];
                var value = op[2];
                var length_1 = value.length;
                for (var j = 0; j < length_1; j++) {
                    var _b = tslib_1.__read(value[j], 2), key = _b[0], x_1 = _b[1];
                    tuples.push([key, timestamp(sid, time, x_1)]);
                }
                builder.setKeys(obj, tuples);
                break;
            }
            case 11: {
                var obj = timestamp(sid, time, op[1]);
                var tuples = [];
                var value = op[2];
                var length_2 = value.length;
                for (var j = 0; j < length_2; j++) {
                    var _c = tslib_1.__read(value[j], 2), key = _c[0], x_2 = _c[1];
                    tuples.push([key, timestamp(sid, time, x_2)]);
                }
                builder.insVec(obj, tuples);
                break;
            }
            case 12: {
                builder.insStr(timestamp(sid, time, op[1]), timestamp(sid, time, op[2]), op[3]);
                break;
            }
            case 13: {
                builder.insBin(timestamp(sid, time, op[1]), timestamp(sid, time, op[2]), (0, fromBase64_1.fromBase64)(op[3]));
                break;
            }
            case 14: {
                var obj = timestamp(sid, time, op[1]);
                var ref = timestamp(sid, time, op[2]);
                var value = op[3];
                var elements = [];
                var length_3 = value.length;
                for (var j = 0; j < length_3; j++)
                    elements.push(timestamp(sid, time, value[j]));
                builder.insArr(obj, ref, elements);
                break;
            }
            case 16: {
                var obj = timestamp(sid, time, op[1]);
                var spans = op[2];
                var what = [];
                var length_4 = spans.length;
                for (var i_1 = 0; i_1 < length_4; i_1++)
                    what.push(timespan(sid, time, spans[i_1]));
                builder.del(obj, what);
                break;
            }
            case 17: {
                builder.nop(op[1] || 1);
                break;
            }
        }
    }
    var patch = builder.patch;
    patch.meta = header[1];
    return patch;
};
exports.decode = decode;
