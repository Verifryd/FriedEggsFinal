"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var runBenchmark_1 = require("../../__bench__/runBenchmark");
var small_object_1 = tslib_1.__importDefault(require("../../__tests__/fixtures/json/small-object"));
var simple_json_patch_1 = tslib_1.__importDefault(require("../../__tests__/fixtures/json/simple-json-patch"));
var clock_1 = require("../clock");
var PatchBuilder_1 = require("../PatchBuilder");
var binary_1 = require("../codec/binary");
var compact_binary_1 = require("../codec/compact-binary");
var json_1 = require("../codec/json");
var shared_1 = require("../../json-pack/cbor/shared");
var createPatch = function (json) {
    var clock = new clock_1.LogicalClock(123456, 0);
    var builder = new PatchBuilder_1.PatchBuilder(clock);
    builder.json(json);
    var patch = builder.flush();
    return patch;
};
var payloads = [
    {
        name: 'small object',
        data: createPatch(small_object_1.default),
    },
    {
        name: 'simple JSON Patch',
        data: createPatch(simple_json_patch_1.default),
    },
];
var runners = [
    {
        name: function (patch) { return "binary (".concat((0, binary_1.encode)(patch).byteLength, " bytes)"); },
        setup: function () {
            return function (patch) {
                return (0, binary_1.encode)(patch);
            };
        },
    },
    {
        name: function (patch) { return "compact (".concat((0, compact_binary_1.encode)(patch).byteLength, " bytes)"); },
        setup: function () {
            return function (patch) {
                return (0, compact_binary_1.encode)(patch);
            };
        },
    },
    {
        name: function (patch) { return "json (".concat((0, shared_1.encode)((0, json_1.encode)(patch)).byteLength, " bytes)"); },
        setup: function () {
            return function (patch) {
                return (0, shared_1.encode)((0, json_1.encode)(patch));
            };
        },
    },
];
var benchmark = {
    name: 'JSON CRDT Patch encoding to Uint8Array',
    warmup: 1000,
    payloads: payloads,
    runners: runners,
};
(0, runBenchmark_1.runBenchmark)(benchmark);
