"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Patch = void 0;
var tslib_1 = require("tslib");
var operations_1 = require("./operations");
var clock_1 = require("./clock");
var binary_1 = require("./codec/binary");
var Patch = (function () {
    function Patch() {
        this.ops = [];
        this.meta = undefined;
    }
    Patch.fromBinary = function (data) {
        return (0, binary_1.decode)(data);
    };
    Patch.prototype.getId = function () {
        var op = this.ops[0];
        if (!op)
            return undefined;
        return op.id;
    };
    Patch.prototype.span = function () {
        var e_1, _a;
        var span = 0;
        try {
            for (var _b = tslib_1.__values(this.ops), _c = _b.next(); !_c.done; _c = _b.next()) {
                var op = _c.value;
                span += op.span();
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return span;
    };
    Patch.prototype.nextTime = function () {
        var ops = this.ops;
        var length = ops.length;
        if (!length)
            return 0;
        var lastOp = ops[length - 1];
        return lastOp.id.time + lastOp.span();
    };
    Patch.prototype.rewriteTime = function (ts) {
        var patch = new Patch();
        var ops = this.ops;
        var length = ops.length;
        var patchOps = patch.ops;
        for (var i = 0; i < length; i++) {
            var op = ops[i];
            if (op instanceof operations_1.DelOp)
                patchOps.push(new operations_1.DelOp(ts(op.id), ts(op.obj), op.what));
            else if (op instanceof operations_1.NewConOp)
                patchOps.push(new operations_1.NewConOp(ts(op.id), op.val));
            else if (op instanceof operations_1.NewVecOp)
                patchOps.push(new operations_1.NewVecOp(ts(op.id)));
            else if (op instanceof operations_1.NewValOp)
                patchOps.push(new operations_1.NewValOp(ts(op.id), ts(op.val)));
            else if (op instanceof operations_1.NewObjOp)
                patchOps.push(new operations_1.NewObjOp(ts(op.id)));
            else if (op instanceof operations_1.NewStrOp)
                patchOps.push(new operations_1.NewStrOp(ts(op.id)));
            else if (op instanceof operations_1.NewBinOp)
                patchOps.push(new operations_1.NewBinOp(ts(op.id)));
            else if (op instanceof operations_1.NewArrOp)
                patchOps.push(new operations_1.NewArrOp(ts(op.id)));
            else if (op instanceof operations_1.InsArrOp)
                patchOps.push(new operations_1.InsArrOp(ts(op.id), ts(op.obj), ts(op.ref), op.data.map(ts)));
            else if (op instanceof operations_1.InsStrOp)
                patchOps.push(new operations_1.InsStrOp(ts(op.id), ts(op.obj), ts(op.ref), op.data));
            else if (op instanceof operations_1.InsBinOp)
                patchOps.push(new operations_1.InsBinOp(ts(op.id), ts(op.obj), ts(op.ref), op.data));
            else if (op instanceof operations_1.InsValOp)
                patchOps.push(new operations_1.InsValOp(ts(op.id), ts(op.obj), ts(op.val)));
            else if (op instanceof operations_1.InsObjOp)
                patchOps.push(new operations_1.InsObjOp(ts(op.id), ts(op.obj), op.data.map(function (_a) {
                    var _b = tslib_1.__read(_a, 2), key = _b[0], value = _b[1];
                    return [key, ts(value)];
                })));
            else if (op instanceof operations_1.NopOp)
                patchOps.push(new operations_1.NopOp(ts(op.id), op.len));
        }
        return patch;
    };
    Patch.prototype.rebase = function (serverTime, transformHorizon) {
        var id = this.getId();
        if (!id)
            throw new Error('EMPTY_PATCH');
        var patchStartTime = id.time;
        if (patchStartTime === serverTime)
            return this;
        var delta = serverTime - patchStartTime;
        return this.rewriteTime(function (id) {
            var sessionId = id.sid;
            var isServerTimestamp = sessionId === 1;
            if (!isServerTimestamp)
                return id;
            var time = id.time;
            if (time < transformHorizon)
                return id;
            return (0, clock_1.ts)(1, time + delta);
        });
    };
    Patch.prototype.clone = function () {
        return this.rewriteTime(function (id) { return id; });
    };
    Patch.prototype.toBinary = function () {
        return (0, binary_1.encode)(this);
    };
    Patch.prototype.toString = function (tab) {
        if (tab === void 0) { tab = ''; }
        var id = this.getId();
        var out = "".concat(this.constructor.name, " ").concat(id ? (0, clock_1.toDisplayString)(id) : '(nil)', "!").concat(this.span());
        for (var i = 0; i < this.ops.length; i++) {
            var isLast = i === this.ops.length - 1;
            out += "\n".concat(tab).concat(isLast ? '└─' : '├─', " ").concat(this.ops[i].toString(tab + (isLast ? '  ' : '│ ')));
        }
        return out;
    };
    return Patch;
}());
exports.Patch = Patch;
