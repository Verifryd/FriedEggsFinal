"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const runBenchmark_1 = require("../../__bench__/runBenchmark");
const small_object_1 = tslib_1.__importDefault(require("../../__tests__/fixtures/json/small-object"));
const simple_json_patch_1 = tslib_1.__importDefault(require("../../__tests__/fixtures/json/simple-json-patch"));
const clock_1 = require("../clock");
const PatchBuilder_1 = require("../PatchBuilder");
const binary_1 = require("../codec/binary");
const compact_binary_1 = require("../codec/compact-binary");
const json_1 = require("../codec/json");
const shared_1 = require("../../json-pack/cbor/shared");
const createPatch = (json) => {
    const clock = new clock_1.LogicalClock(123456, 0);
    const builder = new PatchBuilder_1.PatchBuilder(clock);
    builder.json(json);
    const patch = builder.flush();
    return patch;
};
const payloads = [
    {
        name: 'small object',
        data: createPatch(small_object_1.default),
    },
    {
        name: 'simple JSON Patch',
        data: createPatch(simple_json_patch_1.default),
    },
];
const runners = [
    {
        name: (patch) => `binary (${(0, binary_1.encode)(patch).byteLength} bytes)`,
        setup: () => {
            return (patch) => {
                return (0, binary_1.encode)(patch);
            };
        },
    },
    {
        name: (patch) => `compact (${(0, compact_binary_1.encode)(patch).byteLength} bytes)`,
        setup: () => {
            return (patch) => {
                return (0, compact_binary_1.encode)(patch);
            };
        },
    },
    {
        name: (patch) => `json (${(0, shared_1.encode)((0, json_1.encode)(patch)).byteLength} bytes)`,
        setup: () => {
            return (patch) => {
                return (0, shared_1.encode)((0, json_1.encode)(patch));
            };
        },
    },
];
const benchmark = {
    name: 'JSON CRDT Patch encoding to Uint8Array',
    warmup: 1000,
    payloads,
    runners,
};
(0, runBenchmark_1.runBenchmark)(benchmark);
