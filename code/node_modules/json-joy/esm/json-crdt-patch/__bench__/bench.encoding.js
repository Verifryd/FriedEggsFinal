import { runBenchmark } from '../../__bench__/runBenchmark';
import json1 from '../../__tests__/fixtures/json/small-object';
import json2 from '../../__tests__/fixtures/json/simple-json-patch';
import { LogicalClock } from '../clock';
import { PatchBuilder } from '../PatchBuilder';
import { encode as encodeBinary } from '../codec/binary';
import { encode as encodeCompact } from '../codec/compact-binary';
import { encode as encodeJson } from '../codec/json';
import { encode as encodeCbor } from '../../json-pack/cbor/shared';
const createPatch = (json) => {
    const clock = new LogicalClock(123456, 0);
    const builder = new PatchBuilder(clock);
    builder.json(json);
    const patch = builder.flush();
    return patch;
};
const payloads = [
    {
        name: 'small object',
        data: createPatch(json1),
    },
    {
        name: 'simple JSON Patch',
        data: createPatch(json2),
    },
];
const runners = [
    {
        name: (patch) => `binary (${encodeBinary(patch).byteLength} bytes)`,
        setup: () => {
            return (patch) => {
                return encodeBinary(patch);
            };
        },
    },
    {
        name: (patch) => `compact (${encodeCompact(patch).byteLength} bytes)`,
        setup: () => {
            return (patch) => {
                return encodeCompact(patch);
            };
        },
    },
    {
        name: (patch) => `json (${encodeCbor(encodeJson(patch)).byteLength} bytes)`,
        setup: () => {
            return (patch) => {
                return encodeCbor(encodeJson(patch));
            };
        },
    },
];
const benchmark = {
    name: 'JSON CRDT Patch encoding to Uint8Array',
    warmup: 1000,
    payloads,
    runners,
};
runBenchmark(benchmark);
